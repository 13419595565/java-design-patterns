/**
 * 单例模式
 *
 * 什么是单例模式：
 * 一个对象只能有一个实例，所有对象对它的引用都指向同一个内存地址
 *
 * 优点：
 * 1. 减少内存开支,因为只有一个对象实例,特别是一个对象频繁的创建和销毁时
 * 2. 减少系统的性能开销,当一个对象的产生需要比较多的资源时
 * 3. 单例模式可以避免对资源的多重占用,比如写文件操作
 * 4. 单例模式可以在系统设置全文访问点,优化和共享资源访问,例如由一个单例类去负责一个数据表的映射处理
 *
 * 缺点：
 * 1. 单例模式一般没有接口,扩展比较麻烦,接口对单例模式是没有意义的,它要提供单一实例,而接口和抽象类是不能被实例化的.
 * 当然,在特殊情况下也可以实现,比如在 spring 中有使用，这个看具体的环境而定
 * 2. 单例模式不利于测试,在并行开发环境中,单例模式没有完成,没法进行测试
 * 3. 单例模式与单一职责原则有冲突.一个类应该只实现一个逻辑,而不关心它是否是单例的
 *
 * 使用场景
 * 1. 要求生成唯一序列号的环境
 * 2. 在整个项目中需要一个共享访问点或共享数据
 * 3. 创建一个对象消耗的资源过多时,比如访问 IO 和数据库
 * 4. 需要定义大量的静态常量和静态方法(这里我其实没太搞懂静态方法和单例的区别在哪)
 *
 *
 * Created by Demon-Coffee on 2018/1/15 0015.
 */
package com.demon.singleton;