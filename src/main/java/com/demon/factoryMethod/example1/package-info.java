/**
 * 在讲工厂方法模式之前，先将一个简单工厂模式，这个模式实现了对象和被调用者的解耦，但是依旧有很多问题，工厂方法模式就是
 * 从建工工厂模式演变过来的
 *
 * 简单工厂模式：
 * 		简单工厂模式就是由一个工厂类根据传入的参数决定创建哪一种的产品类
 * 适用场景：
 * 		适用于业务逻辑比较简单的情景
 *
 * 第一步: 假设要实现一个描述动物信息功能,我们知道首先要创建一个抽象类 IAnimal, 然后想具体描述什么动物,
 * 就去继承抽象类,再去添加自己本身独有的属性，我们这里实现一个猫 Cat 和狗 Dog
 *
 * 第二步 : 当我们想去获得这两个动物的信息和特长的时候,需要分别去 new 这两个对象,比较麻烦,当我们想看哪一个动物的信息的时候,
 * 还需要自己去创建对象,我们想的是告诉别人我要看哪个动物的信息,他就给我返回这个动物的信息,这里的别人指的就是"工厂",
 * 接下来我们来实现这个功能,首先需要一个工厂类 AnimalFactory,然后我们写一个测试类 TestFactoryMethod,
 * 我们把具体的获取对象实例的方法交给工厂去做,这样更加符合正常的业务逻辑,但它也有一个问题,比如我们想添加一个动物的信息,
 * 我们需要创建一个动物的具体实现类,还要去工厂中添加信息,当业务逻辑比较复杂的时候,这种做法会让程序变得很混乱,因为一个项目中可能
 * 有几百个工厂,当我们要去实现一个新的功能的时候,可能要修改很多类,这不符合设计模式的六大原则中的开闭原则
 *
 * 所以"简单工厂模式"适用于不会再添加新的功能的小项目中,这种工厂类也被称为全能类,意思是设计的时候就已经考虑好了所有情况
 *
 * Created by Demon-Coffee on 2018/1/13 0013.
 */
package com.demon.factoryMethod.example1;